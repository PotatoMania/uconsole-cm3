# uConsole(CM3)
# Maintainer: PotatoMania <nikko@faint.day>

buildarch=8

pkgbase=linux-uconsole-cm3-aarch64
pkgver=6.5.7
_majorversion=${pkgver%.*}
_subversion=${pkgver##*.}
_srcname=linux-${_majorversion}
_kernelname=${pkgbase#linux}
_desc="uConsole(CM3) kernel package"
pkgrel=1
arch=('aarch64')
url="http://www.kernel.org/"
license=('GPL2')
makedepends=(
  bc
  cpio
  gettext
  git
  libelf
  pahole
  perl
  python
  tar
  xz

  # base-devel
)
options=('!strip')
source=("http://www.kernel.org/pub/linux/kernel/v${_majorversion%%.*}.x/${_srcname}.tar.xz"
        "http://www.kernel.org/pub/linux/kernel/v${_majorversion%%.*}.x/patch-${pkgver}.xz"
        'config'
        'linux.preset'
        '60-linux.hook'
        '90-linux.hook'
        0001-arm-arm64-boot-dts-broadcom-add-uconsole-cm3.patch
        0001-drm-panel-Add-new-driver-for-ClockworkPi-cwu50-panel.patch
        0001-video-backlight-Add-OCP8178-backlight-driver.patch)
b2sums=('2e641b79a080e8f4ce283bcf6b74e2c6f15a374367f1c4c875c663868dbe801317340824fb3adb46b3a51d3b7e1f67cc4e8144d367621ec43ffba5c4eb8abb39'
        '98f6fe0a43562cc60ada3596443e56966742de6ec2ef243331d22a4f345ad5741a5fe136e03ae0a5016fec4234bb89e6a6262076d3e5a449c53bb78ee7fb1175'
        '5b4e1a6151f45941d6769251d64f9754e37510cac1e3a095a88210efa6f8c1c5b3d12eb35a964454c6140a028342293ab872e2c4696f596630457d19ae9359f0'
        'd233cc512fd9dec1d7255d3124cda0431c27cb3dd1daeccfc245879fc0b925d072b07e56c14e8e0a63b8849326e70182fb7b4df5d8364de5602d132d3862768d'
        'c99fe9cf31cffb1bea779d2ee8a0895a533529d073b69e108422e97d01e1ab3c718ce3955bb16003663d33521b02ce926d3c7ecaa7bec4835dab31dbe8391163'
        'f39994fda3d76407b0af192534ca9931782b3e9de4e438a3adbc7640fc794c261102e5c7bfa1523c291ef8c7256c1106e6dbd40814006329c48d90f51c569e82'
        '23ef2f83bd7add1e5b20e8244bf80f9627d1c9cf75f636d68b59aa7a3b8434962431bb4a35e0aaefe0362ffef5a7cfb0e9d37e12180f4f547ba7187e06f8f0e4'
        '79f2b576d50029393af7e3989423400091b82dd187001510d28f42b81ef975ab13453c329b5fe476894e09caf2228e83df7ee35b340b6fe24f46edc42697ab82'
        'cfb33cd3619a32c16fa1ef9f324167dea7859b738b8387847999120b08a8ef171ed27a73878dd1d9734f151a13b21c73ccf1cf22d32c389d1c5539cc1f5e3288')

export KBUILD_BUILD_HOST=archlinux
export KBUILD_BUILD_USER=$pkgbase
export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

### Start to inject code to support cross compile
# echo "$CARCH"
if ! uname -m | grep "aarch64"
then
  # inject code to makepkg's lib, force current architecture to be aarch64
  CARCH="aarch64"
  # tweak flags
  _MAKE_CROSS_FLAGS=(
    "CROSS_COMPILE=aarch64-linux-gnu-"
    "ARCH=arm64"
  )
  _STRIP="aarch64-linux-gnu-strip"
  # add extra deps
  makedepends+=("aarch64-linux-gnu-gcc")
else
  _MAKE_CROSS_FLAGS=()
  _STRIP="strip"
fi

_make1() {
  make ${MAKEFLAGS} -j$(nproc) "${_MAKE_CROSS_FLAGS[@]}" "$@"
}

_make() {
  test -s version
  make ${MAKEFLAGS} -j$(nproc) "${_MAKE_CROSS_FLAGS[@]}" KERNELRELEASE="$(<version)" "$@"
}

_strip() {
  $_STRIP "$@"
}
### End cross compile support

prepare() {
  cd ${_srcname}

  # add upstream patch
  patch -Np1 < ${srcdir}/patch-${pkgver}

  echo "Setting version..."
  # scripts/setlocalversion --save-scmversion
  echo "-$pkgrel" > localversion.10-pkgrel
  echo "${pkgbase#linux}" > localversion.20-pkgname
  _make1 defconfig
  _make1 -s kernelrelease > version
  _make1 mrproper

  # add custom patches
  local src
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    [[ $src = *.patch ]] || continue
    echo "Applying patch $src..."
    patch -Np1 < "../$src"
  done

  echo "Setting config..."
  cp ${srcdir}/config .config
  _make olddefconfig
  diff -u ${srcdir}/config .config || :

  echo "Prepared $pkgbase version $(<version)"
}

build() {
  cd ${_srcname}

  # build!
  unset LDFLAGS
  _make Image Image.gz modules
  # Generate device tree blobs with symbols to support applying device tree overlays in U-Boot
  _make DTC_FLAGS="-@" dtbs
}

_package() {
  pkgdesc="The Linux Kernel and modules - ${_desc}"
  depends=('coreutils' 'kmod' 'mkinitcpio>=0.7')
  optdepends=(
    'wireless-regdb: to set the correct wireless channels of your country'
    'linux-firmware: firmware images needed for some devices'
    'firmware-raspberrypi: firmware images needed for on-board wireless module'
  )
  provides=(
    # "linux=${pkgver}"
    "WIREGUARD-MODULE"
  )
  conflicts=('linux')
  backup=("etc/mkinitcpio.d/${pkgbase}.preset")
  install=${pkgname}.install

  cd $_srcname
  local kernver="$(<version)"
  local modulesdir="$pkgdir/usr/lib/modules/$kernver"

  echo "Installing boot image and dtbs..."
  install -Dm644 arch/arm64/boot/Image{,.gz} -t "${pkgdir}/boot"
  _make INSTALL_DTBS_PATH="${pkgdir}/boot/dtbs" dtbs_install

  echo "Installing modules..."
  _make INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 \
    DEPMOD=/doesnt/exist modules_install  # Suppress depmod

  # remove build and source links
  rm "$modulesdir"/{source,build}

  # sed expression for following substitutions
  local _subst="
    s|%PKGBASE%|${pkgbase}|g
    s|%KERNVER%|${kernver}|g
  "

  # install mkinitcpio preset file
  sed "${_subst}" ../linux.preset |
    install -Dm644 /dev/stdin "${pkgdir}/etc/mkinitcpio.d/${pkgbase}.preset"

  # install pacman hooks
  sed "${_subst}" ../60-linux.hook |
    install -Dm644 /dev/stdin "${pkgdir}/usr/share/libalpm/hooks/60-${pkgbase}.hook"
  sed "${_subst}" ../90-linux.hook |
    install -Dm644 /dev/stdin "${pkgdir}/usr/share/libalpm/hooks/90-${pkgbase}.hook"
}

_package-headers() {
  pkgdesc="Header files and scripts for building modules for linux kernel - ${_desc}"
  provides=("linux-headers=${pkgver}")
  conflicts=('linux-headers')

  cd $_srcname
  local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

  echo "Installing build files..."
  install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
    localversion.* version vmlinux
  install -Dt "$builddir/kernel" -m644 kernel/Makefile
  install -Dt "$builddir/arch/arm64" -m644 arch/arm64/Makefile
  cp -t "$builddir" -a scripts

  # add xfs and shmem for aufs building
  mkdir -p "$builddir"/{fs/xfs,mm}

  echo "Installing headers..."
  cp -t "$builddir" -a include
  cp -t "$builddir/arch/arm64" -a arch/arm64/include
  install -Dt "$builddir/arch/arm64/kernel" -m644 arch/arm64/kernel/asm-offsets.s
  mkdir -p "$builddir/arch/arm"
  cp -t "$builddir/arch/arm" -a arch/arm/include

  install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
  install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

  # https://bugs.archlinux.org/task/13146
  install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

  # https://bugs.archlinux.org/task/20402
  install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
  install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
  install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

  # https://bugs.archlinux.org/task/71392
  install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

  echo "Installing KConfig files..."
  find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

  echo "Removing unneeded architectures..."
  local arch
  for arch in "$builddir"/arch/*/; do
    [[ $arch = */arm64/ || $arch == */arm/ ]] && continue
    echo "Removing $(basename "$arch")"
    rm -r "$arch"
  done

  echo "Removing documentation..."
  rm -r "$builddir/Documentation"

  echo "Removing broken symlinks..."
  find -L "$builddir" -type l -printf 'Removing %P\n' -delete

  echo "Removing loose objects..."
  find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

  echo "Stripping build tools..."
  local file
  while read -rd '' file; do
    case "$(file -bi "$file")" in
      application/x-sharedlib\;*)      # Libraries (.so)
        _strip -v $STRIP_SHARED "$file" ;;
      application/x-archive\;*)        # Libraries (.a)
        _strip -v $STRIP_STATIC "$file" ;;
      application/x-executable\;*)     # Binaries
        _strip -v $STRIP_BINARIES "$file" ;;
      application/x-pie-executable\;*) # Relocatable binaries
        _strip -v $STRIP_SHARED "$file" ;;
    esac
  done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

  echo "Adding symlink..."
  mkdir -p "$pkgdir/usr/src"
  ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"
}

pkgname=("${pkgbase}")
if uname -m | grep "aarch64"
then
  pkgname+=("${pkgbase}-headers")
fi

for _p in "${pkgname[@]}"; do
  eval "package_${_p}() {
    $(declare -f "_package${_p#$pkgbase}")
    _package${_p#${pkgbase}}
  }"
done
