# uConsole(CM3)
# Maintainer: PotatoMania <nikko@faint.day>

buildarch=8

pkgbase=linux-uconsole-cm3-rpi64
pkgver=6.1.y.20231024
# _majorversion=${pkgver%.*}
# _subversion=${pkgver##*.}
# _srcname=linux-${_majorversion}
_desc="uConsole(CM3) kernel package using RPi's fork"

_srcname=linux
_srcbranch="rpi-6.1.y"
_repourl="git+https://github.com/raspberrypi/linux.git#branch=${_srcbranch}"

pkgrel=1
arch=('aarch64')
url="https://github.com/raspberrypi/linux"
license=('GPL2')
makedepends=(
  bc
  cpio
  gettext
  git
  libelf
  pahole
  perl
  python
  tar
  xz

  # base-devel
)
options=('!strip')
source=("${_srcname}::${_repourl}"
        'config'
        'linux.preset'
        '60-linux.hook'
        '90-linux.hook'
        '90-linux-dtbs.hook'
        0001-video-backlight-Add-OCP8178-backlight-driver.patch
        0002-drm-panel-add-clockwork-cwu50.patch
        0003-driver-staging-add-uconsole-simple-amplifier-switch.patch
        0004-arm-dts-overlays-add-uconsole.patch
        0005-DO-NOT-MERGE-drm-vc4-apply-patch-from-CM4.patch
        0006-DO-NOT-MERGE-drivers-power-axp20x-customize-PMU.patch
        0007-DO-NOT-MERGE-power-axp20x_battery-add-calibration-su.patch
)
b2sums=('SKIP'
        'b74147c983ce63e77e4331be5257845561fab454c6f94cd471031d9160ce6804f750e561a9c0984a415e6fc89a6ac65329b04f308385c5baad3c16a09086f829'
        'd233cc512fd9dec1d7255d3124cda0431c27cb3dd1daeccfc245879fc0b925d072b07e56c14e8e0a63b8849326e70182fb7b4df5d8364de5602d132d3862768d'
        'c99fe9cf31cffb1bea779d2ee8a0895a533529d073b69e108422e97d01e1ab3c718ce3955bb16003663d33521b02ce926d3c7ecaa7bec4835dab31dbe8391163'
        'f39994fda3d76407b0af192534ca9931782b3e9de4e438a3adbc7640fc794c261102e5c7bfa1523c291ef8c7256c1106e6dbd40814006329c48d90f51c569e82'
        '94c528624dfa8f1c2d0f8cdda1ba0e2652736f6f635497a5b68170803da64cb516ff3d79607f49a8ea717ca830c35d21b6bee066f173dc7b80317e9e647bd63d'
        'd2ddaad13f7c3239fc05945fec604c4d652c7d9575b4a167c22fea77b81ac20441edb379a502e95dd729896220e2fff88dcade29946aa486dc1f51838c049f22'
        'bcff683267c923af95006943d2f2f3fb0dc162ea50b9221b413c6d1fdff2e82e489bdf4ea49dbd55d60dcf983704d4122f7647cb6d597a59d98d53c185978e1f'
        '9cc5b96a84d63e01ba6b38932f172dfb09121e1636d09812ecfae211f9d6898068a3b3dbf28e7dac6a9a915c1faa3f64d8dbbe76b649f9751a492a3d8065a1b3'
        '7fd71fa21ad59857a41846404c8f7121e24cc841a8852518f82d9956ada5481460a42052a57ee3625d774c22b6e186d2d083a6f0542c0cbed5af3b173fccd266'
        '08fb80fd85005b481944ee1c8a5c9314a4edcdb386e2aa7d379203a7618793012783acd00b56865e6a72104bb65f2bd541776e27b2188089e7886a9fdde48fdc'
        'fe438adaaecb1f26bb3819bd29a46ee6f0641aa0b8b4c78bc7a317a82023e22325cae9433df225494588a5cd803faaadb626142d9b67bd1adac36e7256337bee'
        '2a778b69d50b580fa70a02127525262618d6ab54b2ec2394727999af01a4b335a43917238f447fae76db663a83c10c465dea9f2eae8b4237ba99c40656808a08')

export KBUILD_BUILD_HOST=archlinux
export KBUILD_BUILD_USER=$pkgbase
export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

### Start to inject code to support cross compile
# echo "$CARCH"
if ! uname -m | grep "aarch64"
then
  # inject code to makepkg's lib, force current architecture to be aarch64
  CARCH="aarch64"
  # tweak flags
  _MAKE_CROSS_FLAGS=(
    "CROSS_COMPILE=aarch64-linux-gnu-"
    "ARCH=arm64"
    "-j$(nproc)"
  )
  _STRIP="aarch64-linux-gnu-strip"
  # add extra deps
  makedepends+=("aarch64-linux-gnu-gcc")
else
  _MAKE_CROSS_FLAGS=()
  _STRIP="strip"
fi

_make1() {
  make ${MAKEFLAGS} "${_MAKE_CROSS_FLAGS[@]}" "$@"
}

_make() {
  test -s version
  make ${MAKEFLAGS} "${_MAKE_CROSS_FLAGS[@]}" KERNELRELEASE="$(<version)" "$@"
}

_strip() {
  $_STRIP "$@"
}
### End cross compile support

prepare() {
  cd ${_srcname}

  # add upstream patch, this is for upstream kernels
  #patch -Np1 < ${srcdir}/patch-${pkgver}

  echo "Setting version..."
  echo "-$pkgrel" > localversion.10-pkgrel
  echo "${pkgbase#linux}" > localversion.20-pkgname
  _make1 defconfig
  _make1 -s kernelrelease > version
  _make1 mrproper

  # add custom patches
  local src
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    [[ $src = *.patch ]] || continue
    echo "Applying patch $src..."
    patch -Np1 < "../$src"
  done

  echo "Setting config..."
  cp ${srcdir}/config .config
  _make olddefconfig
  diff -u ${srcdir}/config .config || :

  echo "Prepared $pkgbase version $(<version)"
}

pkgver() {
  cat ${_srcname}/version | sed "s/${pkgbase#linux}//; s/^v//; s/-/.r/; s/-g/./; s/-/./"
}

build() {
  cd ${_srcname}

  # build!
  unset LDFLAGS
  _make Image Image.gz modules
  # Generate device tree blobs with symbols to support applying device tree overlays in U-Boot
  _make DTC_FLAGS="-@" dtbs
}

_package() {
  pkgdesc="The Linux Kernel and modules - ${_desc}"
  depends=('coreutils' 'kmod' 'mkinitcpio>=0.7')
  optdepends=(
    'wireless-regdb: to set the correct wireless channels of your country'
    'linux-firmware: firmware images needed for some devices'
    'firmware-raspberrypi: firmware images needed for on-board wireless module'
    'brcmfmac43456-firmware: firmware for on board WiFi'
    'ap6256-firmware: WiFi&BT firmware, replaces brcmfmac43456-firmware and firmware-raspberrypi on uConsole'
    'raspberrypi-bootloader: bootloader for RPis'
  )
  provides=(
    # "linux=${pkgver}"
    "WIREGUARD-MODULE"
  )
  conflicts=('linux')
  backup=("etc/mkinitcpio.d/${pkgbase}.preset")
  install=${pkgname}.install

  cd $_srcname
  local kernver="$(<version)"
  local modulesdir="$pkgdir/usr/lib/modules/$kernver"

  echo "Installing boot image and dtbs..."
  install -Dm644 arch/arm64/boot/Image{,.gz} -t "${pkgdir}/boot"
  _make INSTALL_DTBS_PATH="${pkgdir}/boot/dtbs" dtbs_install

  echo "Installing modules..."
  _make INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 \
    DEPMOD=/doesnt/exist modules_install  # Suppress depmod

  # remove build and source links
  rm "$modulesdir"/{source,build}

  # sed expression for following substitutions
  local _subst="
    s|%PKGBASE%|${pkgbase}|g
    s|%KERNVER%|${kernver}|g
  "

  # install mkinitcpio preset file
  sed "${_subst}" ../linux.preset |
    install -Dm644 /dev/stdin "${pkgdir}/etc/mkinitcpio.d/${pkgbase}.preset"

  # install pacman hooks
  sed "${_subst}" ../60-linux.hook |
    install -Dm644 /dev/stdin "${pkgdir}/usr/share/libalpm/hooks/60-${pkgbase}.hook"
  sed "${_subst}" ../90-linux.hook |
    install -Dm644 /dev/stdin "${pkgdir}/usr/share/libalpm/hooks/90-${pkgbase}.hook"
  sed "${_subst}" ../90-linux-dtbs.hook |
    install -Dm644 /dev/stdin "${pkgdir}/usr/share/libalpm/hooks/90-${pkgbase}-dtbs.hook"
}

_package-headers() {
  pkgdesc="Header files and scripts for building modules for linux kernel - ${_desc}"
  # provides=(
  #   # "linux-headers=${pkgver}"
  # )
  # conflicts=('linux-headers')

  cd $_srcname
  local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

  echo "Installing build files..."
  install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
    localversion.* version vmlinux
  install -Dt "$builddir/kernel" -m644 kernel/Makefile
  install -Dt "$builddir/arch/arm64" -m644 arch/arm64/Makefile
  cp -t "$builddir" -a scripts

  # add xfs and shmem for aufs building
  mkdir -p "$builddir"/{fs/xfs,mm}

  echo "Installing headers..."
  cp -t "$builddir" -a include
  cp -t "$builddir/arch/arm64" -a arch/arm64/include
  install -Dt "$builddir/arch/arm64/kernel" -m644 arch/arm64/kernel/asm-offsets.s
  mkdir -p "$builddir/arch/arm"
  cp -t "$builddir/arch/arm" -a arch/arm/include

  install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
  install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

  # https://bugs.archlinux.org/task/13146
  install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

  # https://bugs.archlinux.org/task/20402
  install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
  install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
  install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

  # https://bugs.archlinux.org/task/71392
  install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

  echo "Installing KConfig files..."
  find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

  echo "Removing unneeded architectures..."
  local arch
  for arch in "$builddir"/arch/*/; do
    [[ $arch = */arm64/ || $arch == */arm/ ]] && continue
    echo "Removing $(basename "$arch")"
    rm -r "$arch"
  done

  echo "Removing documentation..."
  rm -r "$builddir/Documentation"

  echo "Removing broken symlinks..."
  find -L "$builddir" -type l -printf 'Removing %P\n' -delete

  echo "Removing loose objects..."
  find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

  echo "Stripping build tools..."
  local file
  while read -rd '' file; do
    case "$(file -bi "$file")" in
      application/x-sharedlib\;*)      # Libraries (.so)
        _strip -v $STRIP_SHARED "$file" ;;
      application/x-archive\;*)        # Libraries (.a)
        _strip -v $STRIP_STATIC "$file" ;;
      application/x-executable\;*)     # Binaries
        _strip -v $STRIP_BINARIES "$file" ;;
      application/x-pie-executable\;*) # Relocatable binaries
        _strip -v $STRIP_SHARED "$file" ;;
    esac
  done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

  echo "Adding symlink..."
  mkdir -p "$pkgdir/usr/src"
  ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"
}

pkgname=("${pkgbase}")
if uname -m | grep "aarch64"
then
  pkgname+=("${pkgbase}-headers")
fi

for _p in "${pkgname[@]}"; do
  eval "package_${_p}() {
    $(declare -f "_package${_p#$pkgbase}")
    _package${_p#${pkgbase}}
  }"
done
