#!/usr/bin/env bash

DSI_STATE_FILE=${DSI_STATE_FILE:-/sys/devices/platform/soc/3f700000.dsi/3f700000.dsi.0/dsi_state}
FB_BLANK_FILE=${FB_BLANK_FILE:-/sys/class/graphics/fb0/blank}
DAEMON=${DAEMON:-1}
INTERVAL=${INTERVAL:-60}

[ -f "${DSI_STATE_FILE}" ] || exit 1

#set -x

# a sleep function from
# https://blog.dhampir.no/content/sleeping-without-a-subprocess-in-bash-and-how-to-sleep-forever
snore()
{
  local IFS
  [[ -n "${_snore_fd:-}" ]] || { exec {_snore_fd}<> <(:) && read -r -t 0 -u $_snore_fd; } 2>/dev/null ||
  {
    # workaround for MacOS and similar systems
    local fifo
    fifo=$(mktemp -u)
    mkfifo -m 700 "$fifo"
    exec {_snore_fd}<>"$fifo"
    rm "$fifo"
  }
  read ${1:+-t "$1"} -u $_snore_fd || :
}

reset_display() {
	echo 1 > "$FB_BLANK"
	echo 0 > "$FB_BLANK"
}

check_display() {
	dsi_state=$(< "$DSI_STATE_FILE")
	case $dsi_state in
		error*)
			# retry 
			reset_display
			snore 3
			;;
		*) # include ok*
      return
			;;
  esac
  return 1
}

# foreground/daemon, always running
if [ 1 -eq "$DAEMON" ]; then
  while true; do
    check_display
    snore "$INTERVAL"
  done
fi

# check if dsi have some problem
# only for 5 times
for _ in 1 2 3 4 5 ; do
  if check_display; then
    break
  fi
  snore 1
done
